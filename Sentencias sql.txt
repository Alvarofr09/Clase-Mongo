-- Crear la base de datos
use <base de datos> -- Si no la tienes la crea

-- Borrar base de datos (posicionandote en la que quieras borrar)
db.dropDatabase()

-- Crear colecciones (Tabla)
db.createCollection("Nombre")

-- Borrar la coleecion
db.nombreCollection.drop()

-- 1. Insertar un solo dato en la coleccion
db.Conferencias.insertOne({nombre: "Web Summit", tema: "Tecnología", fecha: new Date("2024-06-01"), lugas: "Lisboa"})

-- 2. Insertar muchos datos de una
db.Conferencias.insertMany([{nombre: "TED Conference", tema: "Inspiración", fecha: new Date("2024-09-15"), lugar: "Vancouver"},{nombre: "CES", tema: "Electrónica de consumo", fecha: new Date("2024-01-08"), lugar: "Las Vegas"}, {nombre: "SXSW", tema: "Tecnología y cultura", fecha: new Date("2024-03-13"), lugar: "Austin"}, {nombre: "E3", tema: "Videojuegos", fecha: new Date("2024-06-15"), lugar: "Los Ángeles"}, {nombre: "Collision", tema: "Tecnología y startups", fecha: new Date("2024-06-20"), lugar: "Toronto"}, {nombre: "Mobile World Congress", tema: "Tecnología móvil", fecha: new Date("2024-02-26"), lugar: "Barcelona"}, {nombre: "Strata Data Conference", tema: "Big Data y ", fecha: new Date("2024-03-17"), lugar: "San Francisco"}, {nombre: "Black Hat", tema: "Seguridad informática", fecha: new Date("2024-08-03"), lugar: "Las Vegas"}, {nombre: "Web Summit", tema: "Tecnología", fecha: new Date("2024-11-04"), lugar: "Lisboa"} ])

-- Devolverte todos los datos
db.nombreCollection.find()
sql: SELECT * FROM tabla;

-- 3. Agregar varios asistentes a una conferencia:
db.Asistentes.insertMany([ {nombre: "María", edad: 30, profesion: "Ingeniera", _id: ("65e06a5266c2a960204fc92d")}, {nombre: "Juan", edad: 35, profesion: "Desarrollador", conferencia_id: ObjectId("65e06a5266c2a960204fc92d")}, {nombre: "Laura", edad: 28, profesion: "Diseñadora", conferencia_id: ObjectId("65e06a5266c2a960204fc92e")}, {nombre: "Carlos", edad: 40, profesion: "Analista", conferencia_id: ObjectId("65e06a5266c2a960204fc92e")}, {nombre: "Sofía", edad: 33, profesion: "Gerente de Proyectos", conferencia_id: ObjectId("65e06a5266c2a960204fc92f")}, {nombre: "Pedro", edad: 32, profesion: "Consultor", conferencia_id: ObjectId("65e06a5266c2a960204fc931")}, {nombre: "Ana", edad: 31, profesion: "Desarrolladora", conferencia_id: ObjectId("65e06a5266c2a960204fc932")}, {nombre: "David", edad: 29, profesion: "Ingeniero de Datos", conferencia_id: ObjectId("65e06a5266c2a960204fc933")}, {nombre: "Elena", edad: 27, profesion: "Analista de Sistemas", conferencia_id: ObjectId("65e06a5266c2a960204fc934")}, {nombre: "Roberto", edad: 34, profesion: "Desarrollador", conferencia_id: ObjectId("65e06a5266c2a960204fc935")}])

-- 4. Agregar un nuevo ponente:
db.Ponentes.insertOne({nombre: "Sara Smith", especialidad: "Inteligencia Artificial", conferencia_id: ObjectId("65e06e3f66c2a960204fc93e")})

-- 5. Agregar muchos ponentes
db.Ponentes.insertMany([ {nombre: "John Doe", especialidad: "Ciberseguridad", conferencia_id: ObjectId("65e06a5266c2a960204fc934")}, {nombre: "Emma Johnson", especialidad: "Analítica de Datos", conferencia_id: ObjectId("65e06a5266c2a960204fc933")}, {nombre: "Michael Brown", especialidad: "Desarrollo Web", conferencia_id: ("65e06a5266c2a960204fc933")}, {nombre: "Sophie Clark", especialidad: "Blockchain", conferencia_id: ObjectId("65e06a5266c2a960204fc932")}, {nombre: "James Wilson", especialidad: "Inteligencia de Negocios", conferencia_id: ("65e06a5266c2a960204fc931")}, {nombre: "Isabella Martinez", especialidad: "Machine Learning", conferencia_id: ObjectId("65e06a5266c2a960204fc92f")}, {nombre: "Daniel Garcia", especialidad: "Desarrollo de Aplicaciones Móviles", conferencia_id: ObjectId("65e06a5266c2a960204fc92e")}, {nombre: "Sophia Lee", especialidad: "Realidad Aumentada", conferencia_id: ObjectId("65e06a5266c2a960204fc92d")}, {nombre: "Ethan Taylor", especialidad: "Big Data", conferencia_id: ObjectId("65e06a5266c2a960204fc92c")} ])

-- 6. Buscar todas los asistentes:
db.Asistentes.find()

-- 7. Buscar una conferencia por tema:
db.Conferencias.find({tema: "Tecnología"})

-- 8. Actualizar la fecha de una conferencia:
db.Conferencias.updateOne({nombre: "Web Summit"}, {$set: {fecha: new Date("2024-10-01")}})
-- Actualizar mas de uno
db.Conferencias.updateMany({nombre: "Web Summit"}, {$set: {fecha: new Date("2024-02-29")}})

-- 9. Eliminar un asistente:
db.Asistentes.deleteOne({nombre: "Juan"})
-- Eliminar mas de uno
db.Asistentes.deleteMany({nombre: "Juan"})

-- 10. Contar el número de ponentes:
db.Ponentes.countDocuments()
db.Ponentes.estimatedDocumentCount()

-- Juntarlos con el find
db.Ponentes.countDocuments({edad: {$lt: 40}})

-- 11. Buscar todos los asistentes menores de 40 años:
db.Asistentes.find({edad: {$lt: 40}})

-- 12. Ordenar las conferencias por fecha en orden ascendente:
db.Conferencias.find().sort({fecha: 1})
Descendente:
db.Conferencias.find().sort({ fecha: -1 })

-- 13. Eliminar todas las conferencias anteriores a 2025:
db.Conferencias.deleteMany({fecha: {$lt: new ISODate("2025-01-01")}})
Mayor que:
db.Conferencias.deleteMany({ fecha: { $gt: new ISODate("2025-01-01") } })

-- 14. Actualizar la especialidad de un ponente:
db.Ponentes.updateOne({nombre: "Sara Smith"}, {$set: {especialidad: "Ciencia de Datos"}})

-- 15. Eliminar todas las conferencias con menos de 1 asistente:
db.Conferencias.deleteMany({$expr: {$lt: [{$size: "$asistentes"}, 1]}})

-- 16. Buscar los ponentes que participaron en una conferencia específica:

-- Hacer variable para poder coger el id de la conferencia
let conferenciaLugar = db.Conferencias.findOne({lugar: "Barcelona"})._id

db.Ponentes.find({conferencia_id: conferenciaLugar})

-- 17. Eliminar todas las conferencias donde el campo “tema” no está definido:
db.Conferencias.deleteMany({ tema: { $exists: false } })

-- 18. Hallar los asistentes que irán a la misma conferencia:
var conferencia = db.Conferencias.findOne({ nombre: "E3" });
if (conferencia) {
    var asistentes = db.Asistentes.find({ conferencias: conferencia._id });
    asistentes.forEach(asistente => {
    print("Nombre del asistente: " + asistente.nombre);
});
} else {
    print("La conferencia no fue encontrada.");
}

-- Buscar los campos de la conferencia que tengan 2 tipos
db.contenidos.find({ tipo: $in: [ “Serie”, “Show”] });
SELECT * FROM contenidos WHERE tipo in (“Serie”, “Show”);

-- Buscar los campos de la conferencia que contenga serie y su rating sea menor a 8
db.contenidos.find({ $or: [{ tipo: { $regex: /Serie/i }}, { rating: { $lt: 8 } } ] } )
SELECT * FROM contenidos WHERE tipo like “%Serie%” or rating < 8

-- Buscar los campos de la conferencia que contenga serie o showy su rating sea menor a 8
db.contenidos.find({ $or: [{ tipo: { $regex: /Serie/i }  }, { tipo: { $regex: /Show/i }  }], { rating: {$lt: 8 } } })
SELECT * FROM contenidos WHERE tipo like “%Serie%” or tipo like “%Show%” and rating < 8

-- Ordenar los datos
db.contenidos.find.sort({rating: -1})
SELECT * FROM productos ORDER BY rating DESC

-- Hacer un limit
db.usuarios.find().limit(1);
SELECT * FROM usuarios LIMIT 1

-- Encontrar los asistentes cuyo nombre contenga la 'E'
db.Ponentes.find({nombre: /^E/})
db.Ponentes.find({nombre: { $regex: /E/i }}) // Este no distingue entre minuscula y mayusculas